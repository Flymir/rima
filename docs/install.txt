# Installing Rima

Rima is open source, licensed under the [MIT Licence](http://www.opensource.org/licenses/mit-license.php).
You can download the latest version of Rima [here](https://github.com/downloads/geoffleyland/rima/rima-latest.tar.gz),
or visit Rima's project page on [GitHub](https://github.com/geoffleyland/rima).

In order to get Rima running, first you'll need Lua,
and a linear program solver.

## Prerequisites

### Lua

You'll need to have Lua 5.1 installed and working (which should be easy).
Instructions and binaries are [here](http://www.lua.org/download.html).
Building Lua from source is very easy (possibly easier than using a package manager),
but there probably is a package for your platform:

+ Linux: There's probably a package for your distribution that you can install with apt-get or yum.
  Make sure you get Lua 5.1 (not 5.0) and that you get the headers - you'll probably need to install a development package
+ OS X: if have [MacPorts](http://www.macports.org/) installed you can `port install lua` (there must be a similar command for [Fink](http://www.finkproject.org/))
+ Windows: there's [Lua for Windows](http://luaforwindows.luaforge.net/) which is a binary installer for Lua and a range of modules

You might want to get LuaJIT instead, which is considerably faster on x86 platforms.
It's available [here](http://luajit.org/)

### Solvers

If you want to solve any optimisation problems
(you could just play with Rima's late-bound symbolic maths stuff, but I don't think it'll keep you amused for long),
you'll need to install one of the solvers.

[lpsolve](http://sourceforge.net/projects/lpsolve) is probably easier to get running - it compiles to one shared library.
The download contains makefiles, build scripts and project files for most platforms.
You'll need version 5.5.

The COIN solvers take a bit more work, and build several shared libraries.
I think the right way to install them is to check out the latest stable version of
[CBC](https://projects.coin-or.org/Cbc/)
from COIN's [Subversion server](https://projects.coin-or.org/svn/Cbc/stable/) and proceed from there.
I took a bit of a more tortuous route, and use the COIN trunk.

Rima also solves nonlinear problems if you have [ipopt](https://projects.coin-or.org/Ipopt) installed.

## Building and installing Rima

There's a makefile in the distribution which, at this stage, I'm afraid you'll almost certainly have to modify yourself.
It works for me on OS X, and I'd appreciate it if you let me know what works on your setup.

If you have CLP, CBC and lpsolve installed, ideally, you'll just have to:

    --! ignore
    make
    make test
    sudo make install

If you have ipopt installed then you'll need to build it separately:
    --! ignore
    make ipopt


### Building

Unfortunately your solvers might not be where the makefile expects them,
and you'll have to edit the makefile, modifying the lines

    --! ignore
    COIN_PREFIX=/usr/local

and

    --! ignore
    LPSOLVE_PREFIX=/usr/local

or alternatively, `make COIN_PREFIX=/path/to/coin`.

If you don't have all the solvers (or any), just make the ones you want: `make clp cbc COIN_PREFIX=/path/to/coin`

### Testing

To test Rima, you'll need the Lua Filesystem library from [here](http://keplerproject.github.com/luafilesystem/).
Then run `make test`.

### Installing

`sudo make install` should install Rima and any solver bindings you've built to the appropriate locations
(where Lua can find them).

### Making Documentation

To build the documentation (`make doc`),
you'll need to install [markdown.lua](http://www.frykholm.se/files/markdown.lua) first.

